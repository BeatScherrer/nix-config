#!/usr/bin/env bash

MTR_CURRENT_MTRSYS="sim"
MTR_WORKSPACE="${HOME}/src/mtrobot"
MTR_BUILD_DIR="${MTR_WORKSPACE}/mtrsys/${MTR_CURRENT_MTRSYS}/build"

MTR_ENV_FILE="${MTR_BUILD_DIR}/test/mtrsys.env"
MTR_FUNCTIONS="${MTR_BUILD_DIR}/test/bash/mtr_functions.sh"
if [[ -f "${MTR_ENV_FILE}" && -f "${MTR_FUNCTIONS}" ]]; then
  export MTR_ENV_FILE
  . "$MTR_FUNCTIONS"
fi

#aliases
if [[ -f "${HOME}/.aliases_mt" ]]; then
  . "${HOME}/.aliases_mt"
fi

# Helper function to change to git dir
ccd() {
  cd "${MTR_WORKSPACE}/mtrsys/${1:-${MTR_CURRENT_MTRSYS}}/" || return 1
}

cducc() {
  cd "${MTR_WORKSPACE}/ucc/${1:-development}" || return 1
}

cdschroot() {
  cd "${MTR_WORKSPACE}/debian-packages/mt-schroot/usr/bin/" || return 1
}

cdclient() {
  cd "$MTR_WORKSPACE/ucc/${1-development}/src/MTRobot.UCC/src/MTRobot.UCC.Presentation.Web/ucc-client" || exit
}

# Helper function to change to a particular build directory
cdbuild() {
  ccd "$1" && cd build || return 1
}

# Helper function to change to a particular source directory
cdsrc() {
  if [[ -z "$1" ]]; then
    cd "$HOME/src"
  else
    ccd "$1" && cd src || return 1
  fi
}

cdgazebo() {
  cd "${HOME}/src/humble/ros2_ws/src/mt-gazebo" || return 1
}

# submodule navigation helper
cds() {
  cd "$1" || return 1
}
_cds() {
  COMPREPLY=()
  cur=${COMP_WORDS[$COMP_CWORD]}
  declare -a submdodules
  submodules="$(git submodule 2>/dev/null | awk '{print $2}' | grep "^$cur" || echo '')"
  COMPREPLY=($(compgen -W '$submodules' -- ''))
}
complete -F _cds cds

sourcerti6() {
  echo "sourcing rti_connext_dds-6.1.0"
  source "/opt/rti_connext_dds-6.1.0/resource/scripts/rtisetenv_x64Linux4gcc7.3.0.bash"
}

sourcerti7() {
  echo "sourcing rti_connext_dds-7.0.0"
  source "/opt/rti_connext_dds-7.0.0/resource/scripts/rtisetenv_x64Linux4gcc7.3.0.bash"
}

#
#  ccache
if [[ true ]]; then
  export PATH=/usr/lib/ccache:$PATH
  export CC="ccache clang-19"
  export CXX="ccache clang++-19"
  export CCACHE_DIR="${HOME}/.ccache_ub22"
  export CCACHE_SLOPPINESS="pch_defines,time_macros,include_file_ctime,include_file_mtime"
fi

cleanws() {
  if [[ -d "build" && -d "install" && -d "log" ]]; then
    rm -rf build install log
  fi
}

sshr() {
  ssh -X "mtr@robot-$1.mt"
}

sshm() {
  ssh "mtr@ms-$1.mt"
}

mt-rti-spy() {
  mt-spy -topicRegex "$1" -printSample
}

mtstop() {
  local container_name="${1:-mtr-beat-latest}"
  distrobox stop "$container_name"
}

mtenter() {
  local container_name="${1:-mtr-beat-latest}"
  distrobox enter "$container_name"
}

mtrestart() {
  local container_name="${1:-mtr-beat-latest}"
  mtrstop "$container_name"
  mtrenter "$container_name"
}

####################
# UCC functionality
####################
cleanbuild() {
  dotnet nuget locals all -c # when nuget package changed with the same version, generally unneeded
  dotnet restore
  dotnet clean # generally unneeded
  dotnet build
}

vncpi() {
  ssh -t -f -L 5900:localhost:5900 "pi2" "x11vnc -auth guess -localhost -display :0" &>/dev/null
  sleep 2
  vncviewer localhost:5900
}
