#!/usr/bin/env bash

export MTR_CURRENT_MTRSYS="2"
export MTR_WORKSPACE="${HOME}/src/mtrobot"
export MTR_SYS_PATH="${MTR_WORKSPACE}/mtrsys/${MTR_CURRENT_MTRSYS}"
export MTR_BUILD_DIR="${MTR_SYS_PATH}/build"

MTR_ENV_FILE="${MTR_BUILD_DIR}/test/mtrsys.env"
if [[ -f "${MTR_ENV_FILE}" ]]; then
  # shellcheck source=/dev/null
  . "$MTR_ENV_FILE"
  # shellcheck source=/dev/null
  . "$MTR_FUNCTIONS"
fi

export ROS_LOCALHOST_ONLY=1
export GZ_DESCRIPTOR_PATH="${GZ_DESCRIPTOR_PATH}:${MTR_SIM_ROS_WS}/ros2_ws/build/mt_gz_msgs/mt_gz_msgs-msgs.gz_desc"

# schroot
# export MTR_SIM_GAZEBO_CMD="schroot -c "$(getSimSchroot)" /bin/bash -- -ic"
# export MTR_SIM_UCC_CMD="schroot -c "$(getSimSchroot)" /bin/bash -- -ic"

# distrobox
# export MTR_SIM_GAZEBO_CMD="distrobox enter mtr-beat-latest -- /bin/bash -c"
# export MTR_SIM_UCC_CMD="distrobox enter mtr-beat-latest -- /bin/bash -c"

# do not wrap commands
export MTR_SIM_GAZEBO_CMD=""
export MTR_SIM_UCC_CMD=""

#aliases
if [[ -f "${HOME}/.aliases_mt" ]]; then
  . "${HOME}/.aliases_mt"
fi

updateContainer() {
  "${HOME}/src/beat/mtr-container/update-container"
}

# Helper function to change to git dir
ccd() {
  cd "${MTR_WORKSPACE}/mtrsys/${1:-${MTR_CURRENT_MTRSYS}}/" || return 1
}

cducc() {
  cd "${MTR_WORKSPACE}/ucc/${1:-development}" || return 1
}

cdschroot() {
  cd "${MTR_WORKSPACE}/debian-packages/mt-schroot/usr/bin/" || return 1
}

cdclient() {
  cd "$MTR_WORKSPACE/ucc/${1-development}/src/MTRobot.UCC/src/MTRobot.UCC.Presentation.Web/ucc-client" || exit
}

# Helper function to change to a particular build directory
cdbuild() {
  ccd "$1" && cd build || return 1
}

# Helper function to change to a particular source directory
cdsrc() {
  if [[ -z "$1" ]]; then
    cd "$HOME/src" || return 1
  else
    ccd "$1" && cd src || return 1
  fi
}

cdmtrobot() {
  cd "$MTR_WORKSPACE" || return 1
}

cdgazebo() {
  if [[ -z "$MTR_SIM_ROS_WS" ]]; then
    echo "MTR_SIM_ROS_WS not set"
    return 1
  fi

  cd "${MTR_SIM_ROS_WS:-/home/beat/src/jazz}/ros2_ws/src/mt-gazebo" || return 1
}

# submodule navigation helper
cds() {
  cd "$1" || return 1
}
_cds() {
  COMPREPLY=()
  cur=${COMP_WORDS[$COMP_CWORD]}
  declare -a submdodules
  submodules="$(git submodule 2>/dev/null | awk '{print $2}' | grep "^$cur" || echo '')"
  COMPREPLY=($(compgen -W '$submodules' -- ''))
}
complete -F _cds cds

sourcerti6() {
  echo "sourcing rti_connext_dds-6.1.0"
  source "/opt/rti_connext_dds-6.1.0/resource/scripts/rtisetenv_x64Linux4gcc7.3.0.bash"
}

sourcerti7() {
  echo "sourcing rti_connext_dds-7.0.0"
  source "/opt/rti_connext_dds-7.0.0/resource/scripts/rtisetenv_x64Linux4gcc7.3.0.bash"
}

#
#  ccache
export PATH=/usr/lib/ccache:$PATH
export CC="ccache clang-20"
export CXX="ccache clang++-20"
export CCACHE_DIR="${HOME}/.ccache_ub22"
export CCACHE_SLOPPINESS="pch_defines,time_macros,include_file_ctime,include_file_mtime"

cleanws() {
  if [[ -d "build" && -d "install" && -d "log" ]]; then
    rm -rf build install log
  fi
}

sshr() {
  ssh -X "mtr@robot-$1.mt"
}

sshm() {
  ssh "mtr@ms-$1.mt"
}

sshv() {
  declare -r arg="$1"
  local disp="0"
  [[ -z "$arg" ]] && echo "usage: mssh <host>" && return 1
  local server="${arg}"
  [[ -n "${2-}" ]] && disp="$2"
  ssh -t -f -L 5900:localhost:5900 "mtr@$server" "x11vnc -auth guess -localhost -display :$disp" &>/dev/null
  sleep 2
  vncviewer localhost:5900
}

mt-rti-spy() {
  mt-spy -topicRegex "$1" -printSample
}

mtoff() {
  local container_name="${1:-mtr-24-beat}"
  distrobox stop "$container_name"
}

ub24() {
  unset GDK_PIXBUF_MODULE_FILE # do not leak the nix store to containers etc.
  export TERM=xterm-256color   # fixes 'terminal is not fully functional' and resulting journal issues
  mtenter mtr-24-beat
}

ub22() {
  unset GDK_PIXBUF_MODULE_FILE # do not leak the nix store to containers etc.
  export TERM=xterm-256color   # fixes 'terminal is not fully functional' and resulting journal issues
  mtenter mtr-22-beat
}

mtenter() {
  local container_name="${1:-mtr-24-beat}"
  distrobox enter "$container_name"
}

mtrestart() {
  local container_name="${1:-mtr-24-beat}"
  mtoff "$container_name"
  mtenter "$container_name"
}

restart() {
  simgazeborestart
  simmasterrestart
  simrobotrestart
}

viewShowroomCamera() {
  mpv rtsps://10.0.0.1:7441/DIJkjGw404SBfpIj
}

mt_debug() {
  sudo gdbserver --attach :7777 $(pgrep "$1")
}

usage() {
  echo "Usage: show [ -t | --trp ] "
  return 1
}

show() {
  local show_trp=unset

  parse_arguments="$(getopt --options -t --longoptions trp -- --trp)"
  valid_arguments="$?"
  if [[ "$valid_arguments" != "0" ]]; then
    usage
  fi

  echo "parsed arugments is $parse_arguments"
  eval set -- "$parse_arguments"

  while :; do
    local arg="$1"
    case $arg in
    -t | --trp)
      show_trp=true
      shift
      ;;
    -h | --help)
      usage
      return 1
      ;;
    --)
      shift
      break
      ;;
    *)
      usage
      return 1
      ;;
    esac
  done

  if [[ $show_trp ]]; then
    mt-gnuplot-visualizer -g "${MTR_LOGS_DIR}/traj.mtl"
  fi

}

####################
# UCC functionality
####################
cleanbuild() {
  dotnet nuget locals all -c # when nuget package changed with the same version, generally unneeded
  dotnet restore
  dotnet clean # generally unneeded
  dotnet build
}

vncpi() {
  ssh -t -f -L 5900:localhost:5900 "pi2" "x11vnc -auth guess -localhost -display :0" &>/dev/null
  sleep 2
  vncviewer localhost:5900
}

viewPf() {
  "$MTR_WORKSPACE/analysis/plot-pf.pl" "$MTR_LOGS_DIR/pf.log" | gnuplot
}

viewDot() {
  local dot_file="$1"

  local tmp
  tmp="/tmp/$(basename $dot_file .dot)"

  dot -Tpng -o "$tmp" "$dot_file"
  xdg-open "$tmp"
}

viewTrp() {
  cd "$MTR_LOGS_DIR" && mt-gnuplot-visualizer -g "$MTR_LOGS_DIR/traj.mtl"
  cd - || return
}
